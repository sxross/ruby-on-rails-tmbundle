# A step-by-step project that demonstrates the use of this bundle.

In this demo we'll create a blog; because that's what blogs are form: being 
demonstrations of web frameworks.

The demonstration uses new features of Rails 2.0 and the snippets in this bundle.

## A New App

    rails blog
    cd blog
    mate .

## Add some models

    ruby script/generate model Post subject:string body:text
    
This creates a 001_create_post migration with a create_table:

    create_table :posts do |t|
      t.string :subject
      t.text :body

      t.timestamps
    end
    
## Sexy Migration support

If you put the cursor on the line after `t.text :body`, type `t.` and press TAB. Select "Create boolean column", and type "published" into the template field.

Note that another `t.` was created on the next line! Press TAB and the cursor will be placed after it. You can now press TAB again to create another column, or delete this line.

Here, delete the extraneous `t.` line.

Run the migrations:

    rake db:migrate
    
## Post fixtures

Update the `test/fixtures/posts.yml` file as:

    published:
      subject: Some article
      body: A test article
      published: true

    nonpublished:
      body: Still writing this one

Note, in Rails 2.0 fixtures no longer have explicit ids. Later on we'll look at snippets for using Foxy Fixtures with auto-completion for associations.

## Public blog controller

    ruby script/generate controller blog
    
Now open `blog_controller_test.rb`. Note how much cleaner functional tests are now via `ActionController::TestCase`. 

Let's do some TDD. First, delete the `test_truth` dummy method. 

To create a test to show a list of blog articles:

    deftg

and TAB gives:

    def test_should_get_action
      get :action, :id => @object
      assert_response :success

    end

Type `index` to replace `action`. Press TAB, and then DELETE to remove `:id => @object`. The press TAB again to go to the end of the method. Now we have:

    def test_should_get_index
      get :index
      assert_response :success

    end
    
Now type `asg`, press TAB, and type `posts`, and press TAB again. This creates an instance variable lookup within an assertion:

    assert(posts = assigns(:posts), "Cannot find @posts")
    
Now, let's assert the HTML format.

Type `ass` and press TAB. Type `div#posts`, press TAB and DELETE, then TAB again to place the cursor within the `assert_select` block:

    assert_select 'div#posts' do
      
    end
    
Now we'll check that the `@posts` objects are represented in the `div#posts` element.

With the cursor inside the `assert_select`:

Type `ass`, press TAB, type `div.post`, press TAB, press TAB again, and type `count` (to replace the `text`). Now press TAB again, and type `@posts.size`. Press TAB a final time (it will highlight the `do...end` block), and press DELETE.

Our test method is now finished:

    def test_should_get_index
      get :index
      assert_response :success
      assert(posts = assigns(:posts), "Cannot find @posts")
      assert_select 'div#posts' do
        assert_select 'div.post', :count => posts.size
      end
    end

NOTE: there is also a `deftp` snippet for functional tests to create a POST test stub.

## Controller actions

Now, to navigate to `blog_controller.rb` there are two options:

* press Shift+Alt+Cmd+DownArrow, and select "Controller" from the drop-down list
* press Alt+Cmd+DownArrow and you'll go directly to the controller (toggles btw the two files)

Change the `index` action method to:

    def index
      @posts = Post.find_all_by_published(true)
    end

## Action views

To create/navigate to the view, press Shift+Alt+Cmd+DownArrow and select "View" (like above).

As there is no `app/views/blog/index*` files, it will prompt you to create a blank view file. By default it guesses `index.html.erb`, but of course you can change that in the dialog box.

Press enter to accept `index.html.erb`. You are taken to the new file.

Let's create HTML to match the earlier tests.

Type `div` and press TAB twice, then type `posts` and press TAB:

    <div id="posts">

    </div>

Inside the `div` element, type `for` and press TAB. This expands into a large ERb-enabled for-loop. Type `@posts`, press TAB, type `post` and press TAB. The cursor is now inside the for-loop.

Inside the for-loop, type: `div` and press TAB. Press DELETE, and type ` class='post'` and press TAB to enter the `div` element.

Press Ctrl+> (greater-than) to create a `<%=  %>` element. If you press Ctrl+> again, it toggles to `<%  %>`, and then again and it becomes `<%-  -%>`, and again and it becomes `<%#  %>` (a Ruby comment). Pressing Ctrl+> again starts at `<%=  %>` again.

Enter `post.body` within the ERb template field.

Move the cursor down between `<% else %>` and `<% end %>`.

Press Shift+Ctrl+W to create a simple element `<p></p>`. You can change the element type here. Just press TAB to go inside the element. Type `There are no posts available to read. All y'all come back soon, yer hear.` because its funny.

Our `index.html.erb` template is now:

    <div id="posts">
      <% if !@posts.blank? %>
        <% for post in @posts %>
          <div class="post">
            <%= post.body %>
          </div>
        <% end %>
      <% else %>
        <p>There are no posts available to read. All y'all come back soon, yer hear.</p>
      <% end %>

    </div>

If we run our functional tests they now pass: `rake test:functionals`

As yet, we have no way for users to leave comments.

## Foxy Fixtures

Create a comment model:

    ruby script/generate model Comment body:text name:string post:references
    
Note: here `post:references` is effectively the same as `post_id:integer`. Within the generated migration it creates `t.reference :post`. There is also a `t.` snippet for references, as for other standard datatypes, which helps setup polymorphic associations.

The generated `create_table` in `002_create_comments.rb` is:

    create_table :comments do |t|
      t.text :body
      t.string :name
      t.references :post

      t.timestamps
    end
    
Run `rake db:migrate`.

Now create some comment fixtures so we can look at Foxy Fixtures. Open `text/fixtures/comments.yml`.

By default, the generated `comments.yml` starts like:

    one:
      body: MyText
      name: MyString
      post: 

    two:
      body: MyText
      name: MyString
      post: 
    
The `post` fields replace the rails1.2 `post_id` fields. Now, we can specify the `post.yml` labels for a post. From above we have `published` and `unpublished`. It can be hard to remember what fixtures we have, so there is a key-combo helper.

Put the cursor after `post: ` and press Alt+Escape. A drop-down box appears with the names of the `posts.yml` fixtures. Select `published` and press return. Repeat for the 2nd fixture. This gives us:

    one:
      body: MyText
      name: MyString
      post: published

    two:
      body: MyText
      name: MyString
      post: published

## Associations
    
To enable the Foxy Fixtures, we need to add associations to the model classes.

You can now quickly toggle from a fixtures file (we're in comments.yml now) to the
model file with Shift+Alt+Cmd+DownArrow hot key.

Within `comment.rb` model, create a new line within the class, and type `bt` and press TAB. Type `post`. This creates a snippet:

    belongs_to :post, :class_name => "Post", :foreign_key => "post_id"
    
The class name and foreign key are now generated from the association name. You can change them by TABbing across. But, we only need the default, so we can delete these options. 

Press TAB and DELETE to remove the `:class_name` and `:foreign_key` options. The `Comment` class is now:

    class Comment < ActiveRecord::Base
      belongs_to :post
    end

Now go to the `Post` class. Press Cmd+T and type `post` and select the model file, and press enter.

Create a new line within the `Post` class. Type `hm` and press TAB to generate a `has_many` association. Type `comments`, and the resulting snippet is:

    has_many :comments, :class_name => "Comments", :foreign_key => "class_name_id"

Notice the default `:class_name` is `Comments`, not `Comment`. This is wrong, 
and would need to be fixed, so its really just a helper to remind you to 
change it. We haven't figured out how to singularize a string using a regular 
expression; so if you know how let us know. 

But here, we don't need the options. So press TAB once and then DELETE.

    class Post < ActiveRecord::Base
      has_many :comments
    end

Note, there is now a `has_many :through` snippet. Type `hmt` and TAB to 
activate it.

Finally, we can run our tests since adding the `Comment` model + fixtures.

`rake test`

## Routes

Open the routes file (Cmd+T, type `routes` and press RETURN).

Change the routes file to:

    ActionController::Routing::Routes.draw do |map|
      map.resources :posts
      map.connect ':controller/:action/:id'
      map.connect ':controller/:action/:id.:format'
    end

## Creating Posts

From the `Post` class (`post.rb`) you can now quickly navigate to a controller 
of the same name. It supports either singular or plural controller names, but 
will default to the plural name, which is the REST/resources preferred name.

To create a `PostsController`, use the 'Go To' hot key (as above) Shift+Alt+Cmd+
DownArrow and select 'Controller'. As there is no `post_controller.rb` nor 
`posts_controller.rb` it will create a `posts_controller.rb` controller file; 
which is what we want here.

Note; at this stage you could use the Rails 2.0 `scaffold` generator to create 
the `posts_controller.rb` (and tests and routes).

In the blank file, we need to create a controller class, and add two methods - new and edit:

    class PostsController < ApplicationController
      def new
        @post = Post.new
      end

      def edit
        @post = Post.find(params[:id])
      end
    end

New classes can be created with `cla` snippet, and new methods created with `def`.

Now we need templates for the `new` and `edit` actions. Place the cursor 
inside the `new` method, and use the 'Go To' hot key (Shift+Alt+Cmd+DownArrow) 
and select 'View'. A dialog box will pop up asking for the name of the new 
template (as there are no `app/views/posts/new*` files). By default, the 
suffix is now `.html.erb` rather than the old `.rhtml`. Press RETURN.

Inside the blank `new.html.erb` file, type `ff` and press TAB, and type `post` 
and press TAB:

    <% form_for @post do |f| -%>

    <% end -%>

`form_for` is the Rails 2.0 preferred helper for managing forms, and 
there are now snippets for common form_for helpers.

To create a label and text field for the `subject` attribute:

Press Shift+Ctrl+W, and press TAB and press RETURN, to create a `<p></p>` block.
Type `f.` and TAB, and select "Label". Type `subject`, press TAB and press DELETE.
To create a `<br/>`, press Ctrl+RETURN.
Type `f.` and TAB, and select "Check box". Type `subject`.

This gives us:

    <% form_for @post do |f| -%>
      <p>
        <%= f.label :subject %><br />
        <%= f.text_field :subject %>
      </p>
    <% end -%>
    
Now repeat for `body` and `published` fields.

Note, for `published`, you might change the label to `Published yet?` by TABbing 
into the default string file.

Finally, add a "Submit" button using the `f.` snippet tab completion.

You can now view this form at [http://localhost:3000/posts/new](http://localhost:3000/posts/new)

The final form is:

    <% form_for @post do |f| -%>
      <p>
        <%= f.label :subject %><br />
        <%= f.text_field :subject %>
      </p>
      <p>
        <%= f.label :body %><br />
        <%= f.text_area :body %>
      </p>
      <p>
        <%= f.label :published, "Published yet?" %><br />
        <%= f.check_box :published %>
      </p>
      <p>
        <%= f.submit "Submit" %>
      </p>
    <% end -%>
    
## Partials

This form is exactly the same as the form required for the `edit.html.erb` template.

Instead of copy+pasting it into the `edit.html.erb` file, we'll create a partial
template.

Select the entire form (Cmd+A), and press Shift+Ctrl+H and a dialog box appears.
Type in `form` and press RETURN.

The form is replaced by:

    <%= render :partial => 'form' %>

Now copy and paste this into the `edit.html.erb` file. To create this file,
return to the controller (from the `new.html.erb` file, press
Shift+Alt+Cmd+DownArrow and select "Controller"), go to the `edit` action,
and use Shift+Alt+Cmd+DownArrow again, and select "View" to create
the `edit.html.erb` template file.

